# -*- coding: utf-8 -*-
"""Algo_Prim

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1perAhqQcatTPihcfd36f_txfDGAg7U-B
"""

import numpy as np

def min_weight(a, k):
  z = np.zeros((1, 3))
  
  for x in range(len(a)):
    b = k[np.where(a[x, 0] == k[:, 0])]
    z = np.append(z, b)

    b1 = k[np.where(a[x, 0] == k[:, 1])]
    z = np.append(z, b1)

    c = k[np.where(a[x, 1] == k[:, 0])]
    z = np.append(z, c)

    c1 = k[np.where(a[x, 1] == k[:, 1])]
    z = np.append(z, c1)

  z = np.reshape(z, (-1, 3))
  z = np.delete(z, 0, 0)
  #print(z)
  e = z[np.where(z[:, 2] == np.min(z[:, 2]))]
  return e[0]

def prim(s, k):
  r = np.array([[s, s, 100]])
  visited = np.array([])
  cost = 0
  node_num = len(k)
  for e in range(len(k)):
    min1 = min_weight(r, k)
    #print(min1)
    index = np.where((k[:, 2] == min1[2]) & (k[:, 1] == min1[1]) & (k[:, 0] == min1[0]))
    #print(index)
    k = np.delete(k, index, axis = 0)
    r = np.r_[r, [min1]]
    #print(r)
    #print(k)
    if len(visited) < node_num-2: 
      cost = cost + min1[2]
      visited = np.append(visited, min1[0])
      visited = np.append(visited, min1[1])
      visited = np.unique(visited)
    else:
      break
      
  visited = np.unique(visited)
    #print(visited)
  return cost, visited

a = np.array([[1, 2, 29], [1, 6, 10], [2, 3, 16], [2, 7, 15], [3, 4, 12], [4, 7, 18], [4, 5, 22], [5, 6, 27], [5, 7, 25]])
#k = np.array([[1, 2, 29]])
c = prim(1, a)
#d = min_weight(k, a)
print(c)

import numpy as np

def min_weight(a, k):
  z = np.zeros((1, 3))
  
  for x in range(len(a)):
    b = k[np.where(a[x, 0] == k[:, 0])]
    z = np.append(z, b)

    b1 = k[np.where(a[x, 0] == k[:, 1])]
    z = np.append(z, b1)

    c = k[np.where(a[x, 1] == k[:, 0])]
    z = np.append(z, c)

    c1 = k[np.where(a[x, 1] == k[:, 1])]
    z = np.append(z, c1)

  z = np.reshape(z, (-1, 3))
  z = np.delete(z, 0, 0)
  print(z)
  e = z[np.where(z[:, 2] == np.min(z[:, 2]))]
  return e[0]

remain = np.array([[2, 3, 16], [3, 4, 12], [4, 7, 18], [4, 5, 22], [5, 6, 27], [5, 7, 25]])
surface = np.array([[1, 6, 10], [1, 2, 29], [2, 7, 15]])
f = min_weight(surface, remain)
print(f)

x = np.array([[1, 2, 29], [1, 6, 10], [2, 3, 16], [2, 7, 15], [3, 4, 12], [4, 7, 18], [4, 5, 22], [5, 6, 27], [5, 7, 25]])
index = np.where((x[:, 2] == 15) & (x[:, 1] == 7) & (x[:, 0] == 2))

visited = np.array([1, 5, 9, 102, 11, 45, 23, 90, 1, 5, 9])
visited = np.unique(visited)
#dists[(np.where((dists >= r) & (dists <= r + dr)))]

print(visited)